#!/usr/bin/python
import sys
import select
import re
import socket

VERSION = '1'  # chat_system version
# try input


if len(sys.argv) != 2:
    print("Usage: python chat_server.py serv_ip:serv_port")
    sys.exit()
ARGS = sys.argv[1].split(':')
IP = str(ARGS[0])
PORT = int(ARGS[1])


# try bind the server to address
try:
    # create a socket
    server = socket.socket()
    server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server.bind((IP, PORT))
except:
    print("Not able to bind the server to the given ip:port address")
    sys.exit()
server.listen(100)
conns = [server]
temp_conns = []
perm_conns_dict = {}


def broadcast(msg, conn):
    for socket in perm_conns_dict.keys():
        if socket != conn:
            try:
                print("Broadcasted!")
                socket.sendall(msg.encode('ascii'))
            except:
                socket.close()
                del perm_conns_dict[socket]
                conns.remove(socket)


def main():
    print('Chat Server started!--> Successfully Running!')
    while True:
        read_sockets, write_sockets, error_sockets = select.select(conns, [], [])
        for socket in read_sockets:
            if socket == server:
                try:
                    newconn, addr = server.accept()
                    hello_msg = 'Hello ' + VERSION + '\n'
                    newconn.sendall(hello_msg.encode('ascii'))
                    conns.append(newconn)
                    temp_conns.append(newconn)
                except:
                    print("Error can't accept connection from anonymous client", e)
                    continue  # don't break or exit
            elif socket in temp_conns:
                try:
                    nick = socket.recv(1024).decode('ascii')
                    if nick:
                        received = re.search(r'NICK\s(\S*)', nick)
                        name = str(received.group(1))
                        if len(name) > 12:
                            error_msg = 'ERROR nickname length should be less than 13 characters'
                            socket.sendall(error_msg.encode('ascii'))
                        elif (re.search(r'!', name) or re.search(r'@', name) or re.search(r'#', name) or re.search(
                                r'\$', name) or re.search(r'%', name) or re.search(r'\*', name) or re.search(r'\^',
                                                                                                             name)):
                            error_msg = "Error! Shouldn't use special characters in name"
                            socket.sendall(error_msg.encode('ascii'))
                        elif received:
                            ok = 'OK' + '\n'
                            socket.sendall(ok.encode('ascii'))
                            perm_conns_dict[socket] = name
                            temp_conns.remove(socket)
                        else:
                            if nick[:3] == 'MSG':
                                error_msg = "ERROR no nick set"
                                socket.sendall(error_msg.encode('ascii'))
                            elif nick[-4:] == 'NICK':
                                error_msg = "ERROR malformed command"
                                socket.sendall(error_msg.encode('ascii'))
                            else:
                                error_msg = "ERROR malformed command"
                                socket.sendall(error_msg.encode('ascii'))
                    else:
                        socket.close()
                        conns.remove(socket)
                        temp_conns.remove(socket)
                except:
                    continue  # don't break or exit
            elif socket in perm_conns_dict.keys():
                try:
                    msg = socket.recv(1024).decode('ascii')
                    if msg:
                        received = re.search(r'MSG\s', msg)
                        if len(msg) > 259:
                            error_msg = "ERROR! Message shouldn't exceed 256 characters"
                            socket.sendall(error_msg.encode('ascii'))
                        elif received:
                            message_to_send = 'MSG ' + str(perm_conns_dict[socket]) + '> ' + msg[4:]
                            broadcast(message_to_send, socket)
                        else:
                            socket.sendall('ERROR malformed command'.encode('ascii'))
                    else:
                        socket.close()
                        conns.remove(socket)
                        del perm_conns_dict[socket]
                except:
                    continue
            else:
                pass
    server.close()


if __name__ == '__main__':
    main()
